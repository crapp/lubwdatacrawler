#     Data Crawler for LUBW Measurement Stations
#     Copyright (C) 2014  Christian Rapp
#
#     This program is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.

__author__ = 'Christian Rapp'

import sqlite3
import logging
import os


class SQliteConnector:
    """
    SQliteConnector Class can be used to store the data gathered with a MeasurementParser into a
    SQlite database

    Attributes:
        args: List generated by argparse lib holding command line options
        log: Logging object
        conn: SQLite3 Connection
    """

    def __init__(self, args):
        """Inits a SQliteConnector Object"""
        self.args = args
        #self.log = logging.getLogger("my_logger")
        self.log = logging.getLogger(__name__)
        self.log.debug("Init SQLiteConnector Object")

        self.conn = sqlite3.Connection

    def insert(self, table_name, comp_values_map):
        """
        Perform an insert operation into the database. Missing tables are created on the fly.
        The database will be opened and closed automatically

        Args:
            table_name: The name of the table we will use. If the Table does not exist it
                        will be created
            comp_values_map: A dictionary of components as keys and a list of values.
        """
        self.log.debug("Insert data in Table " + table_name)
        self._open_connection()
        #FIXME: Replace Umlauts in Table Name
        parameters = [table_name]
        try:
            curs = self.conn.cursor()
            #ref: http://stackoverflow.com/questions/1601151/how-do-i-check-in-sqlite-whether-a-table-exists
            curs.execute("SELECT name FROM sqlite_master WHERE type='table' AND name=?;",
                         parameters)
            #print(curs.fetchone())
            if curs.fetchone() is None:
                self.log.debug("Table " + table_name + " does not exist")
                createtable = "CREATE TABLE " + table_name + \
                              "(ID INTEGER PRIMARY KEY AUTOINCREMENT, " + \
                              "component TEXT NOT NULL, " + \
                              "current INTEGER, " + \
                              "daymax INTEGER, " + \
                              "yesterday_max INTEGER, " + \
                              "yesterday_mean INTEGER, "
                createtable += "measurement_time DATETIME, "
                createtable += "timestamp DATETIME DEFAULT CURRENT_TIMESTAMP);"
                curs.execute(createtable)

            insertstmt = "INSERT INTO " + table_name + "(component, "
            insertstmt += "current, daymax, yesterday_max, yesterday_mean, measurement_time)"
            insertstmt += " VALUES(?, ?, ?, ?, ?, ?)"
            #loop over all keys, add the key to parameters list, extend list by value[] of key
            for key in comp_values_map:
                self.log.debug("Insert values for component " + key)
                parameters = [key]
                parameters.extend(comp_values_map[key])
                curs.execute(insertstmt, parameters)

            self.log.debug("Committing changes")
            self.conn.commit()
        except Exception as e:
            self.log.error(str(e))
            #rollback changes
            self.log.info("Calling rollback to undo changes to DB")
            self.conn.rollback()
            #TODO: Should we reraise this exception?
        finally:
            self.log.debug("Closing database")
            self.conn.close()

    def _open_connection(self):
        """
        Open a sqlite database. It will use the database file provided as command line option. If
        you ommit this option a file called lubw_crawler.sqlite will be created in the directory
        the application is run from.
        Directories that do not exist in the SQlite file path will be created for you.
        Please make sure you have write permissions

        Raises:
            OSError: If a directory could not be created
        """
        self.log.debug("Opening database " + self.args.database)
        if not os.path.isfile(self.args.database):
            self.log.debug("Database file does not exist")
            if not os.path.isdir(os.path.dirname(self.args.database)) and \
               os.path.dirname(self.args.database) != '':
                try:
                    os.makedirs(os.path.dirname(self.args.database))
                except OSError as ex:
                    self.log.error("Could not create Directory for Database " + str(ex))
                    raise
        self.conn = sqlite3.connect(self.args.database)
        self.log.debug("Database open")